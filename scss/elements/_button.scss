/*!
 * # papoGen 0.0.1 - Button
 * - Prefix: btn
 */

@import "../globals/_variables.scss";
@import "../globals/_mixins.scss";
// format: <size> <position> <color> <frame> btn
// ex: normal (center) grey line btn

/* Types */

// default
.btn {
    @include user_select;
    margin: 0.25rem 0.25rem;
    text-align: center;
    opacity: 0.75;
    cursor: pointer;
    width: fit-content;
    height: auto;
    font-size: 1rem;
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    border-width: 0.1rem;
    &:hover {
        opacity: 0.95;
    }
    &:active {
        outline: none;
    }
    &:focus {
        outline: 0;
        opacity: 0.95;
    }

    // icon
    i.icon{
        margin: 0;
    }
    @each $pos, $val in (right: left, left: right) {
        i.icon.#{$pos} {
            margin-#{$val}: 1rem;
        }
    }

    background: #C4C4C4;
}

.btn.default {
    color: #5E5E5E;
    background: #5E5E5E;
    border-color: #5E5E5E;
}

// labeled
.btn.labeled {
    margin: 0;
    padding: 0;
    display: flex;
    align-items: center;
    opacity: 1;
    background: #FFFFFF;

    .btn {
      margin: 0;
      border-top-right-radius: 0rem;
      border-bottom-right-radius: 0rem;
    }

    .label {
      margin: 0;
      border-top-left-radius: 0rem;
      border-bottom-left-radius: 0rem;
    }
}

// basic
.btn.basic {
    @extend .default;
    border-style: solid;
    background: #FFFFFF;
}

/* Groups */
$position: ( down: ('top-left', 'top-right', 'top'), up: ('bottom-left', 'bottom-right', 'bottom'), right: ('top-left', 'bottom-left', 'left'), left: ('top-right', 'bottom-right', 'right'), center: (0));
.buttons {
    width: fit-content;
    display: flex;
    margin: 0;
    padding: 0;

    // grouped button position
    @each $type, $attr in $position {
        .btn.#{$type} {
            width: auto;
            margin: 0;

            @if ($type=='center') {
                border-radius: 0;
            }
            @else {
                border-#{nth($attr, 1)}-radius: 0;
                border-#{nth($attr, 2)}-radius: 0;
            }
        }
    }
}

// group direction
$direction: ( horizontal: row, vertical: column);
@each $type,
$var in $direction {
    .buttons.#{$type} {
        flex-direction: $var;
    }
}

/* States */

// activate, disabled
$state: ( active: 1, disable: 0.4, );
@each $type,
$val in $state {
    .btn.#{$type} {
        opacity: $val;
        cursor: initial;
        &:hover {
            opacity: $val;
        }
        &:focus {
            opacity: $val;
        }
    }
}

/* Variations */

// color
//$bg_col: ( primary: #1E84D4, secondary: #404040, positive: #49C468, negative: #E65050, grey: #ADADAD, black: #333333, orange: #FE9A76);
@each $type,
$col in $color-order {
    .btn.#{$type} {
        color: $col;
        background: $col;
        border-color: $col;
    }
}

// frame or fill
$frame: (fill: none, line: solid);
@each $type, $val in $frame {
    .btn.#{$type} {
        border-style: $val;
        @if ($type=='line') {
            background: $white;
        }
        @else {
            color: $white;
        }
    }
}

// size
$size: ( small: (0.5rem, 0.1rem, 1rem), medium: (1rem, 0.5rem, 1.5rem), large: (1.5rem, 1rem, 2.5rem));
@each $type, $attr in $size {
    .btn.#{$type} {
        font-size: nth($attr, 1);
        padding: nth($attr, 2) nth($attr, 3);
    }

    @each $pos, $val in (right: left, left: right) {
        .btn.#{$type} {
            i.icon.#{$pos} {
                margin: 0;
                margin-#{$val}: nth($attr, 1);
            }
        }
    }
}
