/*!
 * # papoGen 0.0.1 - Grid
 * - Prefix: grid
 *
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 */


/*** Grid default ***/

.grid {
    align-items: stretch;
    flex-direction: row;
    flex-wrap: wrap;
    margin: -1rem;
    padding: 0rem;
    @include display(flex);
    @include grid-ms-flex;
    @include grid-webkit-box;
}


/* Remove Gutters */

.grid-relaxed {
    @extend .grid;
    @include margin-h(-1.5rem, -1.5rem);
}

.grid-ex_relaxed {
    @extend .grid;
    @include margin-h(-2.5rem, -2.5rem);
}


/* Preserve Rows Spacing on Consecutive Grids */

.grid+.grid {
    margin-top: 1rem;
}


/*** Columns ***/


/* Standard 16 col */

.grid>.col:not(.row),
.grid>.row>.col {
    display: inline-block;
    position: relative;
    vertical-align: top;
    width: 6.25%;
    @include padding-h;
}

.grid>* {
    @include padding-h;
}


/* Vertical padding when no rows */

.grid>.col:not(.row) {
    @include padding-v(1rem, 1rem);
}

.grid>.row>.col {
    @include margin-v;
}


/*** Rows ***/

.grid>.row {
    align-items: stretch;
    flex-wrap: wrap;
    justify-content: inherit;
    position: relative;
    padding: 0rem;
    width: 100% !important;
    @include display(flex);
    @include flex-direction(row);
    @include padding-h(1rem, 1rem);
    @include grid-webkit-box($pack: default);
    @include grid-ms-flex($pack: default);
    >.col {
        @include margin-v;
        /* Content */
        >img {
            max-width: 100%;
        }
    }
    /* Content */
    >img {
        max-width: 100%;
    }
}


/*** Loose Coupling ***/


/* Collapse Margin on Consecutive Grid */

.grid>.grid {
    &:first-child {
        margin-top: 0em;
    }
    &:last-child {
        margin-bottom: 0em;
    }
}


/* Segment inside Aligned Grid */

.grid .aligned.row>.col,
.aligned.grid .col {
    >.seg {
        &:not(.seg-compact):not(.seg-attached) {
            width: 100%;
        }
    }
}


/* Align Dividers with Gutter */

.grid .row+.divider {
    flex-grow: 1;
    margin: 1rem;
    -webkit-box-flex: 1;
    -ms-flex-positive: 1;
}

.grid .col+.vertical.divider {
    height: calc(50% - 1rem);
}


/* Remove Border on Last Horizontal Segment */

.grid>.row,
.grid {
    >.col:last-child {
        >.seg-horizontal {
            @include box-shadow;
        }
    }
}


/*** Variations ***/


/** Page Grid **/

@media only screen and (max-width: 767px) {
    .grid.grid-page {
        width: auto;
        @include margin-h;
        @include padding-h;
    }
}

@media only screen and (min-width: 768px) and (max-width: 991px) {
    .grid.grid-paged {
        width: auto;
        @include margin-h;
        @include padding-h(2rem, 2rem);
    }
}

@media only screen and (min-width: 992px) and (max-width: 1199px) {
    .grid.grid-page {
        width: auto;
        @include margin-h;
        @include padding-h(3%, 3%);
    }
}

@media only screen and (min-width: 1200px) and (max-width: 1919px) {
    .grid.grid-page {
        width: auto;
        @include margin-h;
        @include padding-h(15%, 15%);
    }
}

@media only screen and (min-width: 1920px) {
    .grid.grid-page {
        width: auto;
        @include margin-h;
        @include padding-h(23%, 23%);
    }
}


/** Column Count **/


/* Assume full width with one col */

.grid>.col,
.grid>.row>.col {
    &:only-child {
        width: 100%;
    }
}


/* Grid Based */

@for $i from 1 to 16 {
    .grid.col[class*="col-#{i}"]>.row.col,
    .grid.col[class*="col-#{i}"]>.col:not(.row) {
        width: 100% / $i;
    }
}


/* Row Based Overrides */

@for $i from 1 to 16 {
    .grid>.row.col[class*="col-#{$i}"]>.col {
        width: 100% / $i !important;
    }
}


/* Celled Page */

.grid.grid-page.grid-celled {
    @include box-shadow;
}


/** Column Width **/


/* Sizing Combinations */

@for $i from 1 to 16 {
    .grid,
    .grid>.row,
    .grid>.col.row,
    .grid.col {
        >.col[class*="col-#{i}-span"] {
            width: 100% / 16 * $i !important;
        }
    }
    /* RWD Design: Mobile / Tablet / Computer / Large Monitor / Widescreen */
    @each $item in $RWD {
        @include breakpoint1($item) {
            @for $i from 1 to 16 {
                .grid,
                .grid>.row,
                .grid>.col.row,
                .grid.col {
                    >.col[class*="col-#{item}-#{i}-span"] {
                        width: 100% / 16 * $i !important;
                    }
                }
            }
        }
    }
}


/** Centered **/

.grid.grid-centered,
.grid.grid-centered>.row,
.grid>.row.row-centered {
    text-align: center;
    justify-content: center;
    -webkit-box-pack: center;
    -ms-flex-pack: center;
}

.grid.grid-centered>.col:not(.aligned):not(.justified):not(.row),
.grid.grid-centered>.row>.col:not(.aligned):not(.justified),
.grid .row.row-centered>.col:not(.aligned):not(.justified) {
    text-align: left;
}

.grid>.col.col-centered,
.grid>.row>.col.col-centered {
    display: block;
    @include margin-h(auto, auto);
}


/** Relaxed **/

.grid.grid-relaxed {
    >.col:not(.row),
    >.row>.col {
        @include padding-h(1.5rem, 1.5rem);
    }
}

.grid>.row.row-relaxed>.col {
    @include padding-h(1.5rem, 1.5rem);
}

.grid.grid-ex_relaxed {
    >.col:not(.row),
    >.row>.col {
        @include padding-h(2.5rem, 2.5rem);
    }
}

.grid>.row.row-ex_relaxed>.col {
    @include padding-h(2.5rem, 2.5rem);
}


/* Coupling with UI Divider */

.grid.grid-relaxed .row+.divider,
.grid .grid.grid-relaxed.row+.divider {
    @include margin-h(1.5rem, 1.5rem);
}

.grid.grid-ex_relaxed .row+.divider,
.grid .grid.grid-relaxed.row+.divider {
    @include margin-h(2.5rem, 2.5rem);
}


/** Padded **/

.grid.grid-padded {
    &:not(.grid-h):not(.grid-v) {
        margin: 0rem !important;
    }
    &.grid-h {
        @include margin-h(0rem !important, 0rem !important);
    }
    &.grid-v {
        @include margin-v(0rem !important, 0rem !important);
    }
}


/** Floated **/

@for $i from 3 to 4 {
    .grid .col.col-floated-#{nth($position-order, $i)} {
        margin-#{nth($position-order, $i)}: auto;
    }
}


/** Divided **/

.grid.grid-divided {
    &:not(.grid-v) {
        >.row {
            @include margin-v;
            /* No space on top of first row */
            &:first-child.col {
                margin-top: 0rem;
            }
        }
        >.col:not(.row),
        >.row>.col {
            @include box-shadow(-1px 0px 0px 0px rgba(2, 3, 3, 0.15));
        }
        /* No divider on first col on row */
        >.col,
        >.row>.col {
            &:first-child {
                @include box-shadow;
            }
        }
    }
    /* Vertically Divided */
    &.grid-v {
        >.row {
            position: relative;
            &:before {
                content: "";
                height: 1px;
                position: absolute;
                top: 0rem;
                left: 0px;
                margin: 0% 1rem;
                width: calc(100% - 2rem);
                @include box-shadow(0px -1px 0px 0px rgba(34, 36, 38, 0.15));
            }
            /* First Row Vertically Divided */
            &:first-child:before {
                @include box-shadow;
            }
        }
        /* Swap from padding to margin on columns to have dividers align */
        >.col:not(.row),
        >.row>.col {
            @include margin-v($top: 1rem, $bottom: 1rem);
            @include padding-v($top: 0rem, $bottom: 0rem);
        }
    }
    /* Padded Horizontally Divided */
    &.grid-h,
    &.grid-padded:not(.vertically):not(.horizontally) {
        width: 100%;
    }
    /* Relaxed */
    &.grid-relaxed.grid-v>.row:before {
        width: calc(100% - 3rem);
        @include margin-h(1.5rem, 1.5rem);
    }
    &.grid-ex_relaxed.grid-v>.row:before {
        width: calc(100% - 5rem);
        @include margin-h(5rem, 5rem);
    }
    /* Inverted Divided */
    &.grid-inverted:not(.grid-v) {
        >.col:not(.row),
        >.row>.col {
            @include box-shadow(-1px 0px 0px 0px rgba(255, 255, 255, 0.1));
            &:first-child {
                @include box-shadow;
            }
        }
    }
}


/* Divided Row */

.grid>.row-divided>.col {
    @include box-shadow(-1px 0px 0px 0px rgba(34, 36, 38, 0.15));
    &:first-child {
        @include box-shadow;
    }
}

.grid.grid-inverted.grid-divided.grid-v>.row:before {
    -webkit-box-shadow: 0px -1px 0px 0px rgba(255, 255, 255, 0.1);
    box-shadow: 0px -1px 0px 0px rgba(255, 255, 255, 0.1);
}


/** Celled **/

.grid.grid-celled {
    width: 100%;
    @include box-shadow(0px 0px 0px 1px #D4D4D5);
    @include margin-h;
    @include margin-v(0rem, 0rem);
    &.grid-relaxed {
        >.col:not(.row),
        >.row>.col {
            padding: 1.5rem;
        }
    }
    &.grid-ex_relaxed {
        >.col:not(.row),
        >.row>.col {
            padding: 2rem;
        }
    }
    /* Internally Celled */
    &.grid-internally {
        margin: 0rem;
        @include box-shadow;
        >.row {
            &:first-child {
                @include box-shadow;
            }
            >.col:first-child {
                @include box-shadow;
            }
        }
    }
    >.row {
        margin: 0rem;
        padding: 0rem;
        width: 100% !important;
        @include box-shadow(0px -1px 0px 0px #D4D4D5);
        >.col {
            padding: 1rem;
            @include box-shadow(-1px 0px 0px 0px #D4D4D5);
            &:first-child {
                @include box-shadow;
            }
        }
    }
    >.col {
        &:not(.row) {
            padding: 1rem;
            @include box-shadow(-1px 0px 0px 0px #D4D4D5);
        }
        &:first-child {
            @include box-shadow;
        }
    }
}


/** Vertically Aligned: Top / Middel / Bottom **/

@for $i from 1 to 3 {
    .grid.grid-aligned-#{nth($aligned-order, $i)}>.col:not(.row),
    .grid.grid-aligned-#{nth($aligned-order, $i)}>.row>.col,
    .grid>.row.row-aligned-#{nth($aligned-order, $i)}>.col,
    .grid>.col.col-aligned-#{nth($aligned-order, $i)}:not(.row),
    .grid>.row>.col.col-aligned-#{nth($aligned-order, $i)} {
        align-self: nth($align-self-order, $i) !important;
        vertical-align: nth($aligned-order, $i);
        -webkit-box-direction: normal;
        -webkit-box-orient: vertical;
        -ms-flex-item-align: nth($flex-aligned-order, $i) !important;
        @include flex-direction;
    }
}


/* Stretched */

.grid.grid-stretched>.row>.col,
.grid.grid-stretched>.col,
.grid>.row.row-stretched>.col,
.grid>.col.col-stretched:not(.row),
.grid>.row>.col.col-stretched {
    align-self: stretch;
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
    -ms-flex-item-align: stretch;
    @include display(inline-flex);
    @include flex-direction;
    >* {
        flex-grow: 1;
        -webkit-box-flex: 1;
        -ms-flex-positive: 1;
    }
}


/** Horizontally Centered: Left / Center / Right / Justify **/

@for $i from 1 to 3 {
    .grid.grid-aligned-#{nth($text-align-order, $i)}>.col,
    .grid.grid-aligned-#{nth($text-align-order, $i)}>.row>.col,
    .grid>.row.row-aligned-#{nth($text-align-order, $i)}>.col,
    .grid>.col.col-aligned-#{nth($text-align-order, $i)},
    .grid>.row>.col.col-aligned-#{nth($text-align-order, $i)} {
        align-self: inherit;
        text-align: nth($text-align-order, $i);
        -ms-flex-item-align: inherit;
    }
}

.grid.grid-aligned-center {
    justify-content: center;
    -webkit-box-pack: center;
    -ms-flex-pack: center;
}

.grid.grid-aligned-justify {
    text-align: justify;
    @include hyphens;
}


/*** Colored ***/

@each $index,
$value in $color-order {
    .grid {
        >.row.row-#{$index},
        >.col.col-#{$index},
        >.row>.col.col-#{$index} {
            background-color: $value !important;
            color: $white;
        }
        >.row>.col.col-#{$index} {
            @include margin-v(-1rem, -1rem);
            @include padding-h;
        }
    }
}


/** Equal Width **/

.grid.grid-equal>.col:not(.row),
.grid.grid-equal>.row>.col,
.grid>.row.row-equal>.col {
    display: inline-block;
    flex-grow: 1;
    -webkit-box-flex: 1;
    -ms-flex-positive: 1;
}


/** Reverse **/


/* RWD Design: Mobile / Tablet / Computer */

@each $item in $RWD {
    @include breakpoint2($item) {
        .grid.grid-#{$item}.grid-reversed,
        .grid.grid-#{$item}.grid-reversed>.row,
        .grid>.row.row-sm.row-reversed {
            -webkit-box-direction: reverse;
            -webkit-box-orient: horizontal;
            @include flex-direction(row-reverse);
        }
        .grid.grid-#{$item}.grid-reversed.grid-v,
        .grid-#{$item}.grid-reversed.grid-stackable {
            -webkit-box-direction: reverse;
            -webkit-box-orient: vertical;
            @include flex-direction(col-reverse);
        }
        /* Divided Reversed */
        .grid.grid-#{$item}.grid-reversed.grid-divided {
            &:not(.grid-v) {
                >.col,
                >.row>.col {
                    &:first-child {
                        @include box-shadow(-1px 0px 0px 0px rgba(34, 36, 38, 0.15));
                    }
                    &:last-child {
                        @include box-shadow;
                    }
                }
            }
            /* Vertically Divided Reversed */
            &.grid-v>.row {
                &:first-child:before {
                    @include box-shadow(0px -1px 0px 0px rgba(34, 36, 38, 0.15));
                }
                &:last-child:before {
                    @include box-shadow;
                }
            }
            /* Celled Reversed */
            &.grid-celled>.row>.col {
                &:first-child {
                    @include box-shadow(-1px 0px 0px 0px #D4D4D5);
                }
                &:last-child {
                    @include box-shadow;
                }
            }
        }
    }
}


/** Doubling **/


/* Tablet Only */

@media only screen and (min-width: 768px) and (max-width: 991px) {
    .grid.grid-double {
        width: auto;
    }
    .grid>.row.row-double,
    .grid.grid-double>.row {
        margin: 0rem !important;
        padding: 0rem !important;
        >.col {
            display: inline-block !important;
            margin: 0rem;
            @include box-shadow(none !important);
            @include padding-v(1rem !important, 1rem !important);
        }
    }
    @for $i from 2 to 16 {
        .grid.grid-double[class*="col-#{$i}"]>.row>.col,
        .grid.grid-double[class*="col-#{$i}"]>.col:not(.row),
        .grid>[class*="col-#{$i}"].doubling.row.row>.col {
            @if ($i==2) {
                width: 100% !important;
            }
            @else if ($i==3 or $i==4) {
                width: 100% / 2 !important;
            }
            @else if ($i==5 or $i==6 or $i==7) {
                width: 100% / 3 !important;
            }
            @else if ($i==8 or $i=9) {
                width: 100% / 4 !important;
            }
            @else if ($i==10 or $i=11) {
                width: 100% / 5 !important;
            }
            @else if ($i==12 or $i=13) {
                width: 100% / 6 !important;
            }
            @else if ($i==14 or $i=15) {
                width: 100% / 7 !important;
            }
            @else if ($i==16) {
                width: 100% / 8 !important;
            }
        }
    }
}


/* Mobile Only */

@media only screen and (max-width: 767px) {
    .grid>.doubling.row,
    .doubling.grid>.row {
        margin: 0em !important;
        padding: 0em !important;
    }
    .grid>.doubling.row>.col,
    .doubling.grid>.row>.col {
        margin: 0em !important;
        @include box-shadow(none !important);
        @include padding-v(1rem !important, 1rem !important);
    }
    [class*="col-2"].doubling:not(.stackable).grid>.row>.col,
    [class*="col-2"].doubling:not(.stackable).grid>.col:not(.row),
    .grid>[class*="col-2"].doubling:not(.stackable).row.row>.col {
        width: 100% !important;
    }
    [class*="three col"].doubling:not(.stackable).grid>.row>.col,
    [class*="three col"].doubling:not(.stackable).grid>.col:not(.row),
    .grid>[class*="three col"].doubling:not(.stackable).row.row>.col {
        width: 50% !important;
    }
    [class*="four col"].doubling:not(.stackable).grid>.row>.col,
    [class*="four col"].doubling:not(.stackable).grid>.col:not(.row),
    .grid>[class*="four col"].doubling:not(.stackable).row.row>.col {
        width: 50% !important;
    }
    [class*="five col"].doubling:not(.stackable).grid>.row>.col,
    [class*="five col"].doubling:not(.stackable).grid>.col:not(.row),
    .grid>[class*="five col"].doubling:not(.stackable).row.row>.col {
        width: 50% !important;
    }
    [class*="six col"].doubling:not(.stackable).grid>.row>.col,
    [class*="six col"].doubling:not(.stackable).grid>.col:not(.row),
    .grid>[class*="six col"].doubling:not(.stackable).row.row>.col {
        width: 50% !important;
    }
    [class*="seven col"].doubling:not(.stackable).grid>.row>.col,
    [class*="seven col"].doubling:not(.stackable).grid>.col:not(.row),
    .grid>[class*="seven col"].doubling:not(.stackable).row.row>.col {
        width: 50% !important;
    }
    [class*="eight col"].doubling:not(.stackable).grid>.row>.col,
    [class*="eight col"].doubling:not(.stackable).grid>.col:not(.row),
    .grid>[class*="eight col"].doubling:not(.stackable).row.row>.col {
        width: 50% !important;
    }
    [class*="nine col"].doubling:not(.stackable).grid>.row>.col,
    [class*="nine col"].doubling:not(.stackable).grid>.col:not(.row),
    .grid>[class*="nine col"].doubling:not(.stackable).row.row>.col {
        width: 33.33333333% !important;
    }
    [class*="ten col"].doubling:not(.stackable).grid>.row>.col,
    [class*="ten col"].doubling:not(.stackable).grid>.col:not(.row),
    .grid>[class*="ten col"].doubling:not(.stackable).row.row>.col {
        width: 33.33333333% !important;
    }
    [class*="eleven col"].doubling:not(.stackable).grid>.row>.col,
    [class*="eleven col"].doubling:not(.stackable).grid>.col:not(.row),
    .grid>[class*="eleven col"].doubling:not(.stackable).row.row>.col {
        width: 33.33333333% !important;
    }
    [class*="twelve col"].doubling:not(.stackable).grid>.row>.col,
    [class*="twelve col"].doubling:not(.stackable).grid>.col:not(.row),
    .grid>[class*="twelve col"].doubling:not(.stackable).row.row>.col {
        width: 33.33333333% !important;
    }
    [class*="thirteen col"].doubling:not(.stackable).grid>.row>.col,
    [class*="thirteen col"].doubling:not(.stackable).grid>.col:not(.row),
    .grid>[class*="thirteen col"].doubling:not(.stackable).row.row>.col {
        width: 33.33333333% !important;
    }
    [class*="fourteen col"].doubling:not(.stackable).grid>.row>.col,
    [class*="fourteen col"].doubling:not(.stackable).grid>.col:not(.row),
    .grid>[class*="fourteen col"].doubling:not(.stackable).row.row>.col {
        width: 25% !important;
    }
    [class*="fifteen col"].doubling:not(.stackable).grid>.row>.col,
    [class*="fifteen col"].doubling:not(.stackable).grid>.col:not(.row),
    .grid>[class*="fifteen col"].doubling:not(.stackable).row.row>.col {
        width: 25% !important;
    }
    [class*="sixteen col"].doubling:not(.stackable).grid>.row>.col,
    [class*="sixteen col"].doubling:not(.stackable).grid>.col:not(.row),
    .grid>[class*="sixteen col"].doubling:not(.stackable).row.row>.col {
        width: 25% !important;
    }
}


/** Stackable **/

@media only screen and (max-width: 767px) {
    .stackable.grid {
        width: auto;
        @include margin-h(0rem !important, 0rem !important);
    }
    .stackable.grid>.row>.wide.col,
    .stackable.grid>.wide.col,
    .stackable.grid>.col.grid>.col,
    .stackable.grid>.col.row>.col,
    .stackable.grid>.row>.col,
    .stackable.grid>.col:not(.row),
    .grid>.stackable.stackable.row>.col {
        margin: 0rem !important;
        padding: 1rem !important;
        width: 100% !important;
        @include box-shadow(none !important);
    }
    .stackable.grid:not(.vertically)>.row {
        margin: 0rem;
        padding: 0rem;
    }
    /* Coupling */
    .container>.stackable.grid>.col,
    .container>.stackable.grid>.row>.col {
        @include padding-h(0rem !important, 0rem !important);
    }
    /* Don't pad inside segment or nested grid */
    .grid .stackable.grid,
    .segment:not(.vertical) .stackable.page.grid {
        @include margin-h(-1rem !important, -1rem !important);
    }
    /* Divided Stackable */
    .stackable.divided.grid>.row:first-child>.col:first-child,
    .stackable.celled.grid>.row:first-child>.col:first-child,
    .stackable.divided.grid>.col:not(.row):first-child,
    .stackable.celled.grid>.col:not(.row):first-child {
        border-top: none !important;
    }
    .inverted.stackable.celled.grid>.col:not(.row),
    .inverted.stackable.divided.grid>.col:not(.row),
    .inverted.stackable.celled.grid>.row>.col,
    .inverted.stackable.divided.grid>.row>.col {
        border-top: 1px solid rgba(255, 255, 255, 0.1);
    }
    .stackable.celled.grid>.col:not(.row),
    .stackable.divided:not(.vertically).grid>.col:not(.row),
    .stackable.celled.grid>.row>.col,
    .stackable.divided:not(.vertically).grid>.row>.col {
        border-top: 1px solid rgba(34, 36, 38, 0.15);
        @include box-shadow(none !important);
        @include padding-v(2rem !important, 2rem !important);
    }
    .stackable.celled.grid>.row {
        @include box-shadow(none !important);
    }
    .stackable.divided:not(.vertically).grid>.col:not(.row),
    .stackable.divided:not(.vertically).grid>.row>.col {
        @include padding-h(0rem !important, 0rem !important);
    }
}


/** Only (Device) **/


/* These include arbitrary class repetitions for forced specificity */


/* Mobile Only Hide */

@media only screen and (max-width: 767px) {
    [class*="tablet only"].grid.grid.grid:not(.mobile),
    .grid.grid.grid>[class*="tablet only"].row:not(.mobile),
    .grid.grid.grid>[class*="tablet only"].col:not(.mobile),
    .grid.grid.grid>.row>[class*="tablet only"].col:not(.mobile) {
        display: none !important;
    }
    [class*="computer only"].grid.grid.grid:not(.mobile),
    .grid.grid.grid>[class*="computer only"].row:not(.mobile),
    .grid.grid.grid>[class*="computer only"].col:not(.mobile),
    .grid.grid.grid>.row>[class*="computer only"].col:not(.mobile) {
        display: none !important;
    }
    [class*="large screen only"].grid.grid.grid:not(.mobile),
    .grid.grid.grid>[class*="large screen only"].row:not(.mobile),
    .grid.grid.grid>[class*="large screen only"].col:not(.mobile),
    .grid.grid.grid>.row>[class*="large screen only"].col:not(.mobile) {
        display: none !important;
    }
    [class*="widescreen only"].grid.grid.grid:not(.mobile),
    .grid.grid.grid>[class*="widescreen only"].row:not(.mobile),
    .grid.grid.grid>[class*="widescreen only"].col:not(.mobile),
    .grid.grid.grid>.row>[class*="widescreen only"].col:not(.mobile) {
        display: none !important;
    }
}


/* Tablet Only Hide */

@media only screen and (min-width: 768px) and (max-width: 991px) {
    [class*="mobile only"].grid.grid.grid:not(.tablet),
    .grid.grid.grid>[class*="mobile only"].row:not(.tablet),
    .grid.grid.grid>[class*="mobile only"].col:not(.tablet),
    .grid.grid.grid>.row>[class*="mobile only"].col:not(.tablet) {
        display: none !important;
    }
    [class*="computer only"].grid.grid.grid:not(.tablet),
    .grid.grid.grid>[class*="computer only"].row:not(.tablet),
    .grid.grid.grid>[class*="computer only"].col:not(.tablet),
    .grid.grid.grid>.row>[class*="computer only"].col:not(.tablet) {
        display: none !important;
    }
    [class*="large screen only"].grid.grid.grid:not(.mobile),
    .grid.grid.grid>[class*="large screen only"].row:not(.mobile),
    .grid.grid.grid>[class*="large screen only"].col:not(.mobile),
    .grid.grid.grid>.row>[class*="large screen only"].col:not(.mobile) {
        display: none !important;
    }
    [class*="widescreen only"].grid.grid.grid:not(.mobile),
    .grid.grid.grid>[class*="widescreen only"].row:not(.mobile),
    .grid.grid.grid>[class*="widescreen only"].col:not(.mobile),
    .grid.grid.grid>.row>[class*="widescreen only"].col:not(.mobile) {
        display: none !important;
    }
}


/* Computer Only Hide */

@media only screen and (min-width: 992px) and (max-width: 1199px) {
    [class*="mobile only"].grid.grid.grid:not(.computer),
    .grid.grid.grid>[class*="mobile only"].row:not(.computer),
    .grid.grid.grid>[class*="mobile only"].col:not(.computer),
    .grid.grid.grid>.row>[class*="mobile only"].col:not(.computer) {
        display: none !important;
    }
    [class*="tablet only"].grid.grid.grid:not(.computer),
    .grid.grid.grid>[class*="tablet only"].row:not(.computer),
    .grid.grid.grid>[class*="tablet only"].col:not(.computer),
    .grid.grid.grid>.row>[class*="tablet only"].col:not(.computer) {
        display: none !important;
    }
    [class*="large screen only"].grid.grid.grid:not(.mobile),
    .grid.grid.grid>[class*="large screen only"].row:not(.mobile),
    .grid.grid.grid>[class*="large screen only"].col:not(.mobile),
    .grid.grid.grid>.row>[class*="large screen only"].col:not(.mobile) {
        display: none !important;
    }
    [class*="widescreen only"].grid.grid.grid:not(.mobile),
    .grid.grid.grid>[class*="widescreen only"].row:not(.mobile),
    .grid.grid.grid>[class*="widescreen only"].col:not(.mobile),
    .grid.grid.grid>.row>[class*="widescreen only"].col:not(.mobile) {
        display: none !important;
    }
}


/* Large Screen Only Hide */

@media only screen and (min-width: 1200px) and (max-width: 1919px) {
    [class*="mobile only"].grid.grid.grid:not(.computer),
    .grid.grid.grid>[class*="mobile only"].row:not(.computer),
    .grid.grid.grid>[class*="mobile only"].col:not(.computer),
    .grid.grid.grid>.row>[class*="mobile only"].col:not(.computer) {
        display: none !important;
    }
    [class*="tablet only"].grid.grid.grid:not(.computer),
    .grid.grid.grid>[class*="tablet only"].row:not(.computer),
    .grid.grid.grid>[class*="tablet only"].col:not(.computer),
    .grid.grid.grid>.row>[class*="tablet only"].col:not(.computer) {
        display: none !important;
    }
    [class*="widescreen only"].grid.grid.grid:not(.mobile),
    .grid.grid.grid>[class*="widescreen only"].row:not(.mobile),
    .grid.grid.grid>[class*="widescreen only"].col:not(.mobile),
    .grid.grid.grid>.row>[class*="widescreen only"].col:not(.mobile) {
        display: none !important;
    }
}


/* Widescreen Only Hide */

@media only screen and (min-width: 1920px) {
    [class*="mobile only"].grid.grid.grid:not(.computer),
    .grid.grid.grid>[class*="mobile only"].row:not(.computer),
    .grid.grid.grid>[class*="mobile only"].col:not(.computer),
    .grid.grid.grid>.row>[class*="mobile only"].col:not(.computer) {
        display: none !important;
    }
    [class*="tablet only"].grid.grid.grid:not(.computer),
    .grid.grid.grid>[class*="tablet only"].row:not(.computer),
    .grid.grid.grid>[class*="tablet only"].col:not(.computer),
    .grid.grid.grid>.row>[class*="tablet only"].col:not(.computer) {
        display: none !important;
    }
}